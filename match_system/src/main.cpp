// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "match_server/Match.h"
#include "save_client/Save.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/transport/TTransportUtils.h>
#include <thrift/transport/TSocket.h>

#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <queue>
#include <vector>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::match_service;
using namespace  ::save_service;
using namespace std;

// 定义一个任务类型
struct Task{
    User user;
    string type;
};

// 定义消息队列
struct MessageQueue{
    queue<Task> q;
    mutex m;
    condition_variable cv;
}message_queue;

// 定义玩家匹配池
class Pool {
    public:
        // 保存匹配结果
        void save_result(int a, int b) {
            printf("Match Result: %d %d\n", a, b);

            std::shared_ptr<TTransport> socket(new TSocket("123.57.47.211", 9090));
            std::shared_ptr<TTransport> transport(new TBufferedTransport(socket));
            std::shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));
            SaveClient client(protocol);

            // 连接服务器
            try {
                transport->open();

                client.save_data("acs_5178", "15e8c0a5", a, b);

                transport->close();
            } catch (TException& tx) {
                cout << "ERROR: " << tx.what() << endl;
            }
        }

        // 匹配玩家
        void match() {
            while(users.size() > 1){
                auto a = users[0], b = users[1]; // 选出两个用于匹配的玩家
                users.erase(users.begin());
                users.erase(users.begin());

                save_result(a.id, b.id);
            };
        }

        // 添加玩家
        void add(User user) {
            users.push_back(user);
        }

        // 删除玩家
        void remove(User user) {
            for(uint32_t i = 0; i < users.size(); i ++) {
                if(users[i].id == user.id) {
                    users.erase(users.begin() + i);
                    break;
                }
            }
        }
    private:
        vector<User> users; // 用vector来存放玩家
}pool;

class MatchHandler : virtual public MatchIf {
    public:
        MatchHandler() {
            // Your initialization goes here
        }

        int32_t add_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("add_user\n");
            unique_lock<mutex> lck(message_queue.m); // 使用结构体初始化好的锁把它锁起来，此时只有一个线程能执行这句话
            message_queue.q.push({user, "add"}); // 将任务添加到消息队列
            message_queue.cv.notify_all(); // 唤醒条件变量解锁

            return 0;
        }

        int32_t remove_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("remove_user\n");
            unique_lock<mutex> lck(message_queue.m); // 另外一个线程会被卡死在这
            message_queue.q.push({user, "remove"});
            message_queue.cv.notify_all();

            return 0;
        }

};

void consume_task(){
    while(true) {
        unique_lock<mutex> lck(message_queue.m);
        if(message_queue.q.empty()) {
            message_queue.cv.wait(lck); // 先将锁释放掉然后卡住，卡到将这个条件变量唤醒;如果队列是空的，将其锁住，直到有新用户加入才解锁
        }else {
            auto task = message_queue.q.front();
            message_queue.q.pop();
            lck.unlock();

            // 实现
            if(task.type == "add") pool.add(task.user);
            else if(task.type == "remove") pool.remove(task.user);

            pool.match();
        }
    }
}


int main(int argc, char **argv) {
    int port = 9090;
    ::std::shared_ptr<MatchHandler> handler(new MatchHandler());
    ::std::shared_ptr<TProcessor> processor(new MatchProcessor(handler));
    ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);

    cout << "Start Match Server" << endl;

    thread matching_thread(consume_task); // 给循环开一个线程

    server.serve();
    return 0;
}

